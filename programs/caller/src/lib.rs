
// Caller Program

use anchor_lang::prelude::*;
use callee::{self, program::Callee};

declare_id!("3m6gKTbq2rMSjbZZseuZWV7xbQ7czbUUjNuSBxPw8f1c");

#[program]
pub mod caller {
    use super::*;
    pub fn do_cpi(ctx: Context<DoCpi>, data: u64) -> Result<()> {
        let callee_id = ctx.accounts.callee.to_account_info();
        let callee_accounts = callee::cpi::accounts::SetData {
            data_acc: ctx.accounts.data_acc.to_account_info(),
            authority: ctx.accounts.callee_authority.to_account_info(),
        };
        let cpi_ctx = CpiContext::new(callee_id, callee_accounts);
        callee::cpi::set_data(cpi_ctx, data)
    }

    pub fn do_cpi_with_pda_authority(ctx: Context<DoCpiWithPDAAuthority>, data: u64) -> Result<()> {
        let seeds = &[&[SIGNER_SEED_1][..]];
        let callee_id = ctx.accounts.callee.to_account_info();
        let callee_accounts = callee::cpi::accounts::SetData {
            data_acc: ctx.accounts.data_acc.to_account_info(),
            authority: ctx.accounts.callee_authority.to_account_info(),
        };
        let cpi_ctx = CpiContext::new_with_signer(callee_id, callee_accounts, seeds);
        callee::cpi::set_data(cpi_ctx, data)
    }
}

// We can use "UncheckedAccount"s here because
// the callee program does the checks.
// We use "mut" so the autogenerated clients know
// that this account should be mutable.
#[derive(Accounts)]
pub struct DoCpi<'info> {
    #[account(mut)]
    ///CHECK : data
    pub data_acc: UncheckedAccount<'info>,
    ///CHECK: callee
    pub callee_authority: UncheckedAccount<'info>,
    pub callee: Program<'info, Callee>,
}

#[derive(Accounts)]
pub struct DoCpiWithPDAAuthority<'info> {
    #[account(mut)]
    ///CHECK : data
    pub data_acc: UncheckedAccount<'info>,
    ///CHECK: callee
    pub callee_authority: UncheckedAccount<'info>,
    pub callee: Program<'info, Callee>,
}



pub const SIGNER_SEED_1: &[u8] = &[2, 151, 229, 53, 244, 77, 229, 7];
